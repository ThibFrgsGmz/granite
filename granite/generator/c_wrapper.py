# Standard includes
from typing import Optional
# Proejct includes
from granite.generator.c_struct import CStructureGenerator
from granite.generator.output_file_wrapper import OutputFileWrapper

_DEFAULT_PROLOG_H_FILE = """/***
 *
 * This file is autogenerated by:
 *       ______ ____   ___     _   __ ____ ______ ______
 *      / ____// __ \ /   |   / | / //  _//_  __// ____/
 *     / / __ / /_/ // /| |  /  |/ / / /   / /  / __/   
 *    / /_/ // _, _// ___ | / /|  /_/ /   / /  / /___   
 *    \____//_/ |_|/_/  |_|/_/ |_//___/  /_/  /_____/   
 *
 */
"""
DEFAULT_FILE_LOCATION = "default_file"

_DEFAULT_START_INCLUDE_GUARD_H_FILE = """#ifndef     _INC_HEADER_FILE_DEFAULT
#   define  _INC_HEADER_FILE_DEFAULT
"""
_DEFAULT_END_INCLUDE_GUARD_H_FILE = """#endif /* _INC_HEADER_FILE_DEFAULT */
"""

_START_EXTERN_C_GUARD_H_FILE = """#   ifdef   __cplusplus
        extern "C" 
        {
#   endif
"""
_END_EXTERN_C_GUARD_H_FILE = """
#   ifdef   __cplusplus
        }
#   endif
"""


class CFileWrapper(OutputFileWrapper):
    """C File wrapper object
    
    """

    def __init__(
        self,
        prolog: Optional[str] = None,
        filename: Optional[str] = None
    ) -> None:
        """Initialize the object instance
        
        Parameters
        ----------
        prolog:
            Prolog to write into the C source file
        filename:
            Name of the C source file
        """
        # Call the parent class constructor
        super().__init__(filename, ".h")

        if prolog is not None:
            # Write it at the beginning of the file
            self.document.write(prolog)
        # ELSE no prolog was provided
        else:
            # Write the default one
            self.document.write(_DEFAULT_PROLOG_H_FILE)

        self.document.write(_DEFAULT_START_INCLUDE_GUARD_H_FILE)
        
        self.document.write(_START_EXTERN_C_GUARD_H_FILE)

        # Initialize a dictionnary to contain the total C structure
        self.c_struct           =   {}
        # Initialize a list to contain all member of the strucutre
        self.struct_members     =   []

        self.output_struct = CStructureGenerator()

    def __del__(self) -> None:
        """
        Redefine the class destructor to call its parent's destructor

        """
        
        # Write the end of guard for the C language of the header file.
        self.document.write(_END_EXTERN_C_GUARD_H_FILE)
        
        # Write the end of guard of the header file
        self.document.write(_DEFAULT_END_INCLUDE_GUARD_H_FILE)

        super().__del__()


    def populate_structure(
        self,
        name: str,
        members: list
    ) -> None:
        """Set the members of the C structure.

        Parameters
        ----------
        name:
            Name of the structure
        members:
            Members of the structure
        """
        self.output_struct.set_struct_name(name)
        self.output_struct.set_struct_members(members)
        
    def write_structure(self) -> None:
        """Write the C structure into the C source file

        """
        
        # Get the C structure into string
        self.c_struc = self.output_struct.spec_to_struct()
        
        # Write teh structure into the file
        self.write_content(self.c_struc)

    def write_content(self, string: str) -> None:
        """Write the specified string into the C source file.

        Parameters
        ----------
        string:
            String to write into the file
        """

        # Write the string into the file
        self.document.write(string)

    def get_c_structure(self) -> str:
        """Get the C structure.

        Returns
        ----------
        str:
            The C structure
        """

        # Return the C structure 
        return self.c_struc
